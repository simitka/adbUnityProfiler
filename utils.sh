#!/bin/zsh

config_file="settings.conf"
repository_name="adbUnityProfiler"
command_to_run="adbreadprofile"
default_path="$HOME/Documents/$repository_name"

#–î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –≤—ã—Ö–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ ‚Äì bold_text "$(red_text '–ö—Ä–∞—Å–Ω—ã–π –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç')"

bold_text() {
    echo "$(tput bold)$1$(tput sgr0)"
}

dim_text() {
    echo "$(tput dim)$1$(tput sgr0)"
}

underline_text() {
    echo "$(tput smul)$1$(tput sgr0)"
}

reverse_text() {
    echo "$(tput rev)$1$(tput sgr0)"
}

blink_text() {
    echo "$(tput blink)$1$(tput sgr0)"
}

invisible_text() {
    echo "$(tput invis)$1$(tput sgr0)"
}

#
#
#

red_text() {
    echo "$(tput setaf 1)$1$(tput sgr0)"
}

green_text() {
    echo "$(tput setaf 2)$1$(tput sgr0)"
}

yellow_text() {
    echo "$(tput setaf 3)$1$(tput sgr0)"
}

blue_text() {
    echo "$(tput setaf 4)$1$(tput sgr0)"
}

magenta_text() {
    echo "$(tput setaf 5)$1$(tput sgr0)"
}

cyan_text() {
    echo "$(tput setaf 6)$1$(tput sgr0)"
}

white_text() {
    echo "$(tput setaf 7)$1$(tput sgr0)"
}

black_text() {
    echo "$(tput setaf 0)$1$(tput sgr0)"
}

#
#
#

black_bg() {
    echo "$(tput setab 0)$1$(tput sgr0)"
}

red_bg() {
    echo "$(tput setab 1)$1$(tput sgr0)"
}

green_bg() {
    echo "$(tput setab 2)$1$(tput sgr0)"
}

yellow_bg() {
    echo "$(tput setab 3)$1$(tput sgr0)"
}

blue_bg() {
    echo "$(tput setab 4)$1$(tput sgr0)"
}

magenta_bg() {
    echo "$(tput setab 5)$1$(tput sgr0)"
}

cyan_bg() {
    echo "$(tput setab 6)$1$(tput sgr0)"
}

white_bg() {
    echo "$(tput setab 7)$1$(tput sgr0)"
}

#
#
#

show_text_styles() {
    echo "–ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞:"
    echo "---------------------------------"
    bold_text "–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç"
    dim_text "–¢—É—Å–∫–ª—ã–π —Ç–µ–∫—Å—Ç"
    underline_text "–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç"
    blink_text "–ú–∏–≥–∞—é—â–∏–π —Ç–µ–∫—Å—Ç (–Ω–µ –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç)"
    reverse_text "–ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"
    invisible_text "–ù–µ–≤–∏–¥–∏–º—ã–π —Ç–µ–∫—Å—Ç (–∫–æ–ø–∏—Ä—É–π –∏ –≤—Å—Ç–∞–≤–ª—è–π)"
    echo "---------------------------------"
    red_text "–ö—Ä–∞—Å–Ω—ã–π —Ç–µ–∫—Å—Ç"
    green_text "–ó–µ–ª–µ–Ω—ã–π —Ç–µ–∫—Å—Ç"
    yellow_text "–ñ–µ–ª—Ç—ã–π —Ç–µ–∫—Å—Ç"
    blue_text "–°–∏–Ω–∏–π —Ç–µ–∫—Å—Ç"
    magenta_text "–ü—É—Ä–ø—É—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç"
    cyan_text "–ë–∏—Ä—é–∑–æ–≤—ã–π —Ç–µ–∫—Å—Ç"
    white_text "–ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç"
    black_text "–ß–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–≤–∏–¥–∏–º—ã–º)"
    echo "---------------------------------"
    red_bg "–ö—Ä–∞—Å–Ω—ã–π —Ñ–æ–Ω"
    green_bg "–ó–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω"
    yellow_bg "–ñ–µ–ª—Ç—ã–π —Ñ–æ–Ω"
    blue_bg "–°–∏–Ω–∏–π —Ñ–æ–Ω"
    magenta_bg "–ü—É—Ä–ø—É—Ä–Ω—ã–π —Ñ–æ–Ω"
    cyan_bg "–ë–∏—Ä—é–∑–æ–≤—ã–π —Ñ–æ–Ω"
    white_bg "–ë–µ–ª—ã–π —Ñ–æ–Ω"
    black_bg "–ß–µ—Ä–Ω—ã–π —Ñ–æ–Ω"
    echo "---------------------------------"
    bold_text "$(underline_text "–ñ–∏—Ä–Ω—ã–π + –ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π")"
    red_text "$(bold_text "–ö—Ä–∞—Å–Ω—ã–π + –ñ–∏—Ä–Ω—ã–π")"
    yellow_text "$(bold_text "$(underline_text "–ñ–∏—Ä–Ω—ã–π + –ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π + –ñ–µ–ª—Ç—ã–π")")"
    cyan_bg "$(black_text "–ß–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –±–∏—Ä—é–∑–æ–≤–æ–º —Ñ–æ–Ω–µ")"
    echo "---------------------------------"
    echo "üé® –í—Å–µ —Å—Ç–∏–ª–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã! üöÄ"
}

#
#
#

function finalize() {
    reverse_text "To continue, press any button..."
    stty -icanon
    dd bs=1 count=1 >/dev/null 2>&1
    stty icanon
    $command_to_run
}

function wait_for_any_key() {
    reverse_text "To continue, press any button..."
    read -k 1 -s
}

function choose_adb() {
    devices=($(adb devices | awk 'NR>1 && $2=="device" {print $1}'))
    device_count=${#devices[@]}

    if [[ $device_count -eq 0 ]]; then
        echo "‚ùå Error: There are no devices connected to ADB."
        finalize
        exit 2
    fi

    if [[ $device_count -eq 1 ]]; then
        device=${devices[1]}
    else
        bold_text "$(reverse_text 'There are several devices connected to ADB. Select one from the list:')"
        for ((i = 0; i < device_count; i++)); do
            echo "    [$((i + 1))] ${devices[i + 1]}"
        done
        echo -n "üìù Enter a number from list: "
        read device_choice
        echo

        if ! [[ $device_choice =~ ^[0-9]+$ ]] || [[ $device_choice -lt 1 ]] || [[ $device_choice -gt $device_count ]]; then
            echo "‚ùå Error: Incorrect device selection"
            finalize
            exit 3
        fi

        device=${devices[$((device_choice))]}
    fi
}
